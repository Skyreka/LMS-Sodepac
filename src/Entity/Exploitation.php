<?php

namespace App\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity(repositoryClass="App\Repository\ExploitationRepository")
 */
class Exploitation
{
    /**
     * @ORM\Id()
     * @ORM\GeneratedValue()
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * @ORM\OneToOne(targetEntity="App\Entity\Users", inversedBy="exploitation", cascade={"persist", "remove"})
     * @ORM\JoinColumn(nullable=false)
     */
    private $users;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    private $size;

    /**
     * @ORM\OneToMany(targetEntity="App\Entity\Ilots", mappedBy="exploitation", orphanRemoval=true)
     */
    private $ilots;

    public function __construct()
    {
        $this->ilots = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUsers(): ?Users
    {
        return $this->users;
    }

    public function setUsers(Users $users): self
    {
        $this->users = $users;

        return $this;
    }

    public function getSize(): ?int
    {
        return $this->size;
    }

    public function setSize(?int $size): self
    {
        $this->size = $size;

        return $this;
    }

    /**
     * @return Collection|Ilots[]
     */
    public function getIlots(): Collection
    {
        return $this->ilots;
    }

    public function addIlot(Ilots $ilot): self
    {
        if (!$this->ilots->contains($ilot)) {
            $this->ilots[] = $ilot;
            $ilot->setExploitation($this);
        }

        return $this;
    }

    public function removeIlot(Ilots $ilot): self
    {
        if ($this->ilots->contains($ilot)) {
            $this->ilots->removeElement($ilot);
            // set the owning side to null (unless already changed)
            if ($ilot->getExploitation() === $this) {
                $ilot->setExploitation(null);
            }
        }

        return $this;
    }
}
