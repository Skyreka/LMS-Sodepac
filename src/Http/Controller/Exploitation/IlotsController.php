<?php

namespace App\Http\Controller\Exploitation;

use App\Controller\Exploitation\EntityManager;
use App\Domain\Culture\Entity\Cultures;
use App\Domain\Culture\Repository\CulturesRepository;
use App\Domain\Ilot\Entity\Ilots;
use App\Domain\Ilot\Form\IlotsType;
use App\Domain\Ilot\Repository\IlotsRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

/**
 * Class IlotsController
 * @package App\Controller\Parcel
 * @Route("/exploitation/ilots")
 */
class IlotsController extends AbstractController
{
    public function __construct(private readonly EntityManagerInterface $em)
    {
    }

    /**
     * @Route("/", name="ilots_index", methods={"GET"})
     */
    public function index(
        IlotsRepository $ir,
        Request $request
    ): Response
    {
        $year = $request->get('year');
        if(! isset($year)) {
            $year = date('Y');
        }

        return $this->render('exploitation/ilots/index.html.twig', [
            'ilotsCount' => $ir->countIlotByExploitation($this->getUser()->getExploitation()),
            'sizeAvailable' => $ir->countAvailableSizeIlot($this->getUser()->getExploitation()),
            'ilots' => $ir->findIlotsFromExploitation($this->getUser()->getExploitation(), null, $year)
        ]);
    }

    /**
     * @Route("/new", name="ilots_new", methods={"GET", "POST"})
     */
    public function new(Request $request, IlotsRepository $ir): Response
    {
        // Get Size
        $size = $ir->countAvailableSizeIlot($this->getUser()->getExploitation());

        if($size > 0) {
            //-- Create form
            $ilot = new Ilots();
            $form = $this->createForm(IlotsType::class, $ilot, ['max_size' => $size]);
            $form->handleRequest($request);

            $ilot
                ->setExploitation($this->getUser()->getExploitation())
                ->setAddedAt(new \DateTime())
                ->setUpdateAt(new \DateTime());

            if($form->isSubmitted() && $form->isValid()) {
                //-- If pack demo
                if($this->getUser()->getPack() === 'PACK_DEMO' && $ilot->getSize() > 10) {
                    $this->addFlash('danger', "Vous avez un pack Démo, vous ne pouvez pas créer un ilot de plus 10ha");
                    return $this->redirectToRoute('ilots_index');
                }
                //-- Check if size available
                if($size < $ilot->getSize()) {
                    $this->addFlash('danger', "Vous n'avez pas assez d'espace disponible");
                    return $this->redirectToRoute('ilots_index');
                }
                $this->em->persist($ilot);
                $this->em->flush();
                $this->addFlash('success', 'Bienvenue dans votre nouvel ilot');
                return $this->redirectToRoute('ilots_index', ['id' => $ilot->getId()]);
            }

            return $this->render('exploitation/ilots/new.html.twig', [
                'form' => $form->createView(),
            ]);
        } else {
            // Return error no size
            $this->addFlash('danger', "Vous ne pouvez pas créer d'ilot, plus d'espace disponible");
            return $this->redirectToRoute('login_success');
        }
    }

    /**
     * @Route("/show/{id}", name="ilots_show", methods={"GET", "POST"}, requirements={"id":"\d+"})
     */
    public function show(
        Ilots $ilot,
        CulturesRepository $culturesRepository,
        Request $request
    ): Response
    {
        $culturesInProgress = $culturesRepository->findByIlot($ilot);
        $culturesArchived = $culturesRepository->findOldByIlot($ilot, $request->get('year'));

        return $this->render('exploitation/ilots/show.html.twig', [
            'ilot' => $ilot,
            'culturesInProgress' => $culturesInProgress,
            'culturesArchived' => $culturesArchived,
            'year' => $request->get('year')
        ]);
    }

    /**
     * @Route("/delete/{id}", name="ilots_delete", methods="DELETE", requirements={"id":"\d+"})
     */
    public function delete(Ilots $ilot, Request $request)
    {
        if($this->isCsrfTokenValid('deleteIlot', $request->get('_token'))) {

            $culture = new Cultures();
            $ilot->removeCulture($culture);
            $this->em->remove($ilot);
            $this->em->flush();
            $this->addFlash('success', 'Ilot supprimé avec succès');
            return $this->redirectToRoute('home');
        }
        return $this->redirectToRoute('home');
    }

    /**
     * @Route("/edit/{id}", name="ilots_edit", methods={"GET", "POST"}, requirements={"id":"\d+"})
     */
    public function edit(Ilots $ilot, Request $request): Response
    {
        $form = $this->createForm(IlotsType::class, $ilot);
        $form->handleRequest($request);

        if($form->isSubmitted() && $form->isValid()) {
            $ilot->setUpdateAt(new \DateTime());

            $this->em->flush();
            $this->addFlash('success', 'Ilot édité avec succès');
            return $this->redirectToRoute('ilots_show', ['id' => $ilot->getId()]);
        }

        return $this->render('exploitation/ilots/edit.html.twig', [
            'ilot' => $ilot,
            'form' => $form->createView()
        ]);
    }
}
