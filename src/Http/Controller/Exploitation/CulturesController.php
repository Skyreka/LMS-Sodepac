<?php

namespace App\Http\Controller\Exploitation;

use App\Domain\Culture\Entity\Cultures;
use App\Domain\Culture\Form\CulturesNewType;
use App\Domain\Culture\Repository\CulturesRepository;
use App\Domain\Ilot\Entity\Ilots;
use App\Domain\Intervention\Repository\InterventionsRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

/**
 * Class CulturesController
 * @package App\Controller\Exploitation
 * @Route("/exploitation")
 */
class CulturesController extends AbstractController
{
    public function __construct(private readonly EntityManagerInterface $em)
    {
    }
    
    /**
     * @Route("/ilots/culture/edit/{id}", name="cultures_edit", methods={"GET", "POST"}, requirements={"id":"\d+"})
     */
    public function edit(Cultures $culture, Request $request, CulturesRepository $cr): Response
    {
        $size = $cr->countAvailableSizeCulture($culture->getIlot());
        
        $form = $this->createForm(CulturesNewType::class, $culture, ['max_size' => $size]);
        $form->handleRequest($request);
        
        if($form->isSubmitted() && $form->isValid()) {
            $culture->setUpdateAt(new \DateTime());
            $this->em->flush();
            $this->addFlash('success', 'Culture modifiée avec succès');
            return $this->redirectToRoute('cultures_show', ['id' => $culture->getId()]);
        }
        return $this->render('exploitation/cultures/edit.html.twig', [
            'culture' => $culture,
            'form' => $form->createView()
        ]);
    }
    
    /**
     * @Route("/ilots/culture/synthese/{id}", name="cultures.synthese", methods={"GET", "POST"}, requirements={"id":"\d+"})
     */
    public function synthese(Cultures $culture, InterventionsRepository $interventions): Response
    {
        return $this->render('exploitation/cultures/synthese.html.twig', [
            'culture' => $culture,
            'interventions' => $interventions
        ]);
    }
    
    
    /**
     * @Route("/ilots/culture/synthese/{id}/print", name="culture_synthese_print", methods={"GET", "POST"}, requirements={"id":"\d+"})
     */
    public function synthesePrint(Cultures $culture, InterventionsRepository $interventions): Response
    {
        return $this->render('exploitation/cultures/synthese_print.html.twig', [
            'culture' => $culture,
            'interventions' => $interventions
        ]);
    }
    
    /**
     * @Route("/ilots/{id}/culture/new", name="cultures_new", methods={"GET", "POST"}, requirements={"id":"\d+"})
     */
    public function new(Ilots $ilot, Request $request, CulturesRepository $cr): Response
    {
        //-- Get Size
        $size = $cr->countAvailableSizeCulture($ilot);
        if($size <= 0) {
            $this->addFlash('danger', 'Vous ne pouvez pas créer de culture, plus d\'espace disponible dans cette ilot');
            return $this->redirectToRoute('ilots_show', ['id' => $ilot->getId()]);
        }
        //-- Form
        $culture = new Cultures();
        $form    = $this->createForm(CulturesNewType::class, $culture, ['max_size' => $size]);
        $form->handleRequest($request);
        $culture
            ->setIlot($ilot)
            ->setAddedAt(new \DateTime())
            ->setUpdateAt(new \DateTime());
        if($form->isSubmitted() && $form->isValid()) {
            $data = $form->getData();
            $size = $size + 0.1;
            
            if($size <= 0 or $data->getSize() > $size) {
                $this->addFlash('danger', 'Vous ne pouvez pas créer cette culture, la taille déclarée est trop grande.');
                return $this->redirectToRoute('cultures_new', ['id' => $ilot->getId()]);
            }
            $this->em->persist($culture);
            $this->em->flush();
            $this->addFlash('success', 'Culture créee avec succès');
            return $this->redirectToRoute('cultures_show', ['id' => $culture->getId()]);
        }
        return $this->render('exploitation/cultures/new.html.twig', [
            'form' => $form->createView(),
            'ilot' => $ilot
        ]);
    }
    
    /**
     * @Route(".ilots/culture/show/{id}", name="cultures_show", methods={"GET", "POST"}, requirements={"id":"\d+"})
     */
    public function show(Cultures $culture, InterventionsRepository $ir): Response
    {
        return $this->render('exploitation/cultures/show.html.twig', [
            'culture' => $culture,
            'ir' => $ir
        ]);
    }
    
    /**
     * @Route("/cultures/delete/{id}", name="cultures.delete", methods="DELETE")
     */
    public function delete(Cultures $culture, Request $request)
    {
        if($this->isCsrfTokenValid('delete' . $culture->getId(), $request->get('_token'))) {
            $this->em->remove($culture);
            $this->em->flush();
            $this->addFlash('success', 'Culture supprimé avec succès');
        }
        return $this->redirectToRoute('ilots_show', ['id' => $culture->getIlot()->getId()]);
    }
}
